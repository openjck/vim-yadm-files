#!/usr/bin/env bash

# The absolute path to the directory that this script is in
# https://stackoverflow.com/a/246128/4297741
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

CACHED_VADER_PLUGIN_DIRECTORY=/tmp/vader.vim

# Write a Vim/Neovim config file which enables only Vader and this plugin
function _write_config_file() {
  local CONFIG_FILE_FILENAME="$1"
  local TEST_TARGET="$2"


  if [[ "$TEST_TARGET" == local ]]; then
    local PATH_TO_TESTED_PLUGIN
    PATH_TO_TESTED_PLUGIN=$(realpath "$SCRIPT_DIR/..")
    LINE_TO_ENABLE_TESTED_PLUGIN="Plug '$PATH_TO_TESTED_PLUGIN'"
  elif [[ "$TEST_TARGET" == github* ]]; then
    local BRANCH
    BRANCH=$(cut --delimiter=':' --fields=2 <<< "$TEST_TARGET")
    LINE_TO_ENABLE_TESTED_PLUGIN="Plug 'openjck/vim-yadm-files', { 'branch': '$BRANCH' }"
  fi

  {
    echo 'call plug#begin()'
    echo "Plug '$CACHED_VADER_PLUGIN_DIRECTORY'"
    echo "$LINE_TO_ENABLE_TESTED_PLUGIN"
    echo 'call plug#end()'
  } > "$CONFIG_FILE_FILENAME"
}

# Cache the Vader plugin for subsequent runs of this script
function cache_vader() {
  if [[ ! -d "$CACHED_VADER_PLUGIN_DIRECTORY" ]]; then
    echo -n "Caching Vader to $CACHED_VADER_PLUGIN_DIRECTORY... "
    git clone --quiet --depth 1 https://github.com/junegunn/vader.vim.git "$CACHED_VADER_PLUGIN_DIRECTORY"
    echo "done."
    echo
  fi
}

function test_vim() {
  local TEST_TARGET VIM_HOME VIM_CONFIG_DIRECTORY VIMRC

  TEST_TARGET="$1"

  VIM_HOME=$(mktemp --directory)
  VIM_CONFIG_DIRECTORY="$VIM_HOME/.vim"
  VIMRC="$VIM_CONFIG_DIRECTORY/vimrc"

  # Install vim-plug
  # https://github.com/junegunn/vim-plug#installation
  curl --silent --fail --location --create-dirs --output \
    "$VIM_CONFIG_DIRECTORY/autoload/plug.vim" \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  _write_config_file "$VIMRC" "$TEST_TARGET"

  # Install the plugins and run the tests in an isolated environment.[1]
  #
  # Note that vader.vim suggests a different way of running tests in an isolated
  # environment,[2] but that method assumes that vader.vim and the plugin being
  # tested are already installed in the normal Vim/Neovim environment.
  #
  # [1] https://vi.stackexchange.com/a/14865/28836
  # [2] https://github.com/junegunn/vader.vim#setting-up-isolated-testing-environment
  HOME="$VIM_HOME" vim -c PlugInstall -c quitall
  HOME="$VIM_HOME" vim -Nc "Vader $SCRIPT_DIR/../tests/*"
}

function test_nvim() {
  local TEST_TARGET NVIM_HOME NVIM_INIT

  TEST_TARGET="$1"

  NVIM_HOME=$(mktemp --directory)
  NVIM_CONFIG_DIRECTORY="$NVIM_HOME/.config/nvim"
  NVIM_INIT="$NVIM_CONFIG_DIRECTORY/init.vim"

  mkdir --parents "$NVIM_CONFIG_DIRECTORY"

  # Install vim-plug
  # https://github.com/junegunn/vim-plug#installation
  curl --silent --fail --location --create-dirs --output \
    "$NVIM_HOME/.local/share/nvim/site/autoload/plug.vim" \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  _write_config_file "$NVIM_INIT" "$TEST_TARGET"

  # Install the plugins and run the tests in an isolated environment.[1]
  #
  # Note that vader.vim suggests a different way of running tests in an isolated
  # environment,[2] but that method assumes that vader.vim and the plugin being
  # tested are already installed in the normal Vim/Neovim environment.
  #
  # Note also that a different method needs to be used to isolate Neovim.[3] The
  # HOME trick which is used to isolate Vim does not work for Neovim.
  #
  # [1] https://vi.stackexchange.com/a/14865/28836
  # [2] https://github.com/junegunn/vader.vim#setting-up-isolated-testing-environment
  # [3] https://www.reddit.com/r/neovim/comments/bge752/set_a_different_location_for_nvim_config_dir/elk7dbk/?context=3
  #
  # shellcheck disable=SC2034
  local XDG_CONFIG_HOME="$NVIM_HOME/.config"
  # shellcheck disable=SC2034
  local XDG_DATA_HOME="$NVIM_HOME/.local/share"
  nvim -c PlugInstall -c quitall
  nvim -c "Vader $SCRIPT_DIR/../tests/*"
}

if [[ "$#" -ne 1 ]] || [[ ! "$1" =~ ^(local|github:(dev|master))$ ]]; then
  echo "Usage: $0 TEST_TARGET"
  echo
  echo 'Where test targets are:'
  echo '    local'
  echo '    github:dev'
  echo '    github:master'
  echo
  echo 'For example:'
  echo "    $0 github:dev"
  exit 1
else
  TEST_TARGET="$1"

  cache_vader

  echo -n 'Testing in vim... '
  test_vim "$TEST_TARGET"
  echo 'done.'

  echo -n 'Testing in nvim... '
  test_nvim "$TEST_TARGET"
  echo 'done.'
fi
